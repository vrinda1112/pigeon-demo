# Generated by Django 3.2.9 on 2021-11-26 07:47

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('email', models.EmailField(default=None, max_length=60, null=True, unique=True)),
                ('name', models.CharField(max_length=60, verbose_name='Name')),
                ('phone', models.CharField(max_length=10, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created On')),
                ('last_login', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProductionSheetLIM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('machine_number', models.IntegerField()),
                ('product_type', models.CharField(choices=[('FO011', 'N-S'), ('FO012', 'N-M'), ('FO013', 'N-L'), ('FO014', 'N-Y')], max_length=20)),
                ('total_shots', models.IntegerField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('shift', models.CharField(choices=[('A', 'MORNING'), ('B', 'AFTERNOON'), ('C', 'NIGHT')], max_length=20)),
                ('shot_weight', models.IntegerField(blank=True, help_text='1 shot=8 nipples')),
                ('rm_code', models.CharField(help_text='raw material code', max_length=120)),
                ('rm_lot_no', models.CharField(help_text='raw materail manufacturing lot no', max_length=120)),
                ('bin_number', models.CharField(max_length=120)),
                ('product_weight', models.IntegerField(blank=True, help_text='total weight of produts produced')),
                ('lot_no', models.CharField(help_text='unique alpha numeric string used by pigeon officials', max_length=120)),
                ('approver', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='productionsheetlim_approved_by', to='wip.userprofile')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='productionsheetlim_reported_by', to='wip.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='LIMProductionCounters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('machine_number', models.IntegerField()),
                ('product_type', models.CharField(choices=[('FO011', 'N-S'), ('FO012', 'N-M'), ('FO013', 'N-L'), ('FO014', 'N-Y')], max_length=120)),
                ('counter_start', models.IntegerField(blank=True, help_text='Total no.of products at the time of starting shift')),
                ('counter_end', models.IntegerField(blank=True, help_text='Total products produced at the end of shift')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('setup_rejection', models.IntegerField(blank=True, help_text='rejected bottles due to setting up of LIM in cases of downtime')),
                ('total_line_rejection', models.IntegerField(blank=True)),
                ('qc_samples_taken', models.IntegerField(blank=True, null=True)),
                ('qc_samples_ok', models.IntegerField(blank=True)),
                ('approver', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='limproductioncounters_approved_by', to='wip.userprofile')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='limproductioncounters_reported_by', to='wip.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='LIMParameters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('machine_number', models.IntegerField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('shift', models.CharField(choices=[('A', 'MORNING'), ('B', 'AFTERNOON'), ('C', 'NIGHT')], max_length=120)),
                ('clamping_force', models.SmallIntegerField(blank=True, help_text='force required to close the mold')),
                ('injection_time', models.SmallIntegerField(blank=True, help_text='time taken to inject raw material in mold in secs')),
                ('holding_time', models.SmallIntegerField(blank=True, help_text='mateial holded in mold in secs')),
                ('cooling_time', models.SmallIntegerField(blank=True, help_text='time taken for product to take shape')),
                ('cycle_time', models.SmallIntegerField(blank=True, help_text='time taken from first opening of mold to next')),
                ('product_type', models.CharField(choices=[('FO011', 'N-S'), ('FO012', 'N-M'), ('FO013', 'N-L'), ('FO014', 'N-Y')], help_text='size of nipple or bottle', max_length=120)),
                ('material_lot_no', models.CharField(help_text='raw material lot no', max_length=120)),
                ('cavity_no', models.SmallIntegerField(blank=True, help_text='1-8 , no of cavities in lin from where nipples come out')),
                ('air_pressure', models.SmallIntegerField(blank=True, help_text='pressure with which nipples are ejected in bar')),
                ('feed_stock_pressure', models.IntegerField(blank=True, help_text='material feeding pressure')),
                ('approver', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='limparameters_approved_by', to='wip.userprofile')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='limparameters_reported_by', to='wip.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='LIMChecklist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('machine_number', models.IntegerField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('product_type', models.CharField(choices=[('FO011', 'N-S'), ('FO012', 'N-M'), ('FO013', 'N-L'), ('FO014', 'N-Y')], max_length=20)),
                ('shift', models.CharField(choices=[('A', 'MORNING'), ('B', 'AFTERNOON'), ('C', 'NIGHT')], max_length=20)),
                ('cw_temp', models.SmallIntegerField(blank=True, help_text='lim cylinder water temperature,usually 25-40 C', null=True)),
                ('water_pressure', models.SmallIntegerField(blank=True, help_text='pressure of water in lim, usually 2-4.5 bar', null=True)),
                ('oil_temp', models.SmallIntegerField(blank=True, help_text='hydraulic oil temperature, usually 40-50 C', null=True)),
                ('leak_check', models.BooleanField(blank=True, help_text='any leakage in material wires', null=True)),
                ('silicon_feeder', models.CharField(blank=True, choices=[('ABNORMAL', 'ABNORMAL'), ('NORMAL', 'NORMAL')], help_text='silicon raw material feeder system', max_length=120, null=True)),
                ('heater_temp', models.CharField(blank=True, choices=[('ABNORMAL', 'ABNORMAL'), ('NORMAL', 'NORMAL')], help_text='heater temperature', max_length=120, null=True)),
                ('oil_level', models.CharField(blank=True, choices=[('ABNORMAL', 'ABNORMAL'), ('NORMAL', 'NORMAL')], help_text='hydraulic oil level', max_length=120, null=True)),
                ('oil_leakage', models.BooleanField(blank=True, help_text='Oil leakage from or of any joints', null=True)),
                ('feeder_pressure', models.SmallIntegerField(blank=True, help_text='Pressure from which raw material is pushed to feeder', null=True)),
                ('desk_light', models.CharField(blank=True, choices=[('ABNORMAL', 'ABNORMAL'), ('NORMAL', 'NORMAL')], max_length=120, null=True)),
                ('conveyor', models.CharField(blank=True, choices=[('ABNORMAL', 'ABNORMAL'), ('NORMAL', 'NORMAL')], help_text='check product rolling down the line', max_length=120, null=True)),
                ('valve_A', models.CharField(blank=True, choices=[('OPEN', 'OPEN'), ('CLOSE', 'CLOSE')], max_length=120, null=True)),
                ('valve_B', models.CharField(blank=True, choices=[('OPEN', 'OPEN'), ('CLOSE', 'CLOSE')], max_length=120, null=True)),
                ('air_pressure', models.SmallIntegerField(blank=True, help_text='usually 2-6 bar', null=True)),
                ('purge_status', models.BooleanField(blank=True, help_text='purge material removed from machine', null=True)),
                ('cleaning_status', models.BooleanField(blank=True, null=True)),
                ('approver', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='limchecklist_approved_by', to='wip.userprofile')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='limchecklist_reported_by', to='wip.userprofile')),
            ],
        ),
    ]
